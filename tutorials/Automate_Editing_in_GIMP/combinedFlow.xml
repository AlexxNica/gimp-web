<combined>Definition
  <flow>FullAuto<step>FinalAdjust<comment>Set up the grid for Rotate and or Perspective Transform</comment>
      <comment>Easier to do geometric operations with single layer</comment>
      <comment>This first step is run as part of the import jpeg</comment>
      <comment>In the console get ID with: theImage = gimp.image_list()[0]</comment>
      <comment>First set some variables and establish grid spacing and style</comment>
      <command>centerX = theImage.width/2</command>
      <command>centerY = theImage.height/2</command>
      <command>gridSpacing = max(theImage.width, theImage.height)/24</command>
      <command>pdb.gimp_image_grid_set_offset(theImage, centerX, centerY)</command>
      <command>pdb.gimp_image_grid_set_spacing(theImage, gridSpacing, gridSpacing)</command>
      <command>pdb.gimp_image_grid_set_style(theImage, GRID_ON_OFF_DASH)</command>
      <comment>Expand the canvas by 25 percent -easier use to rotate / perspective</comment>
      <command>adjust = max(theImage.height, theImage.width)/4</command>
      <command>theImage.resize(theImage.width + adjust, theImage.height+ adjust, adjust/2, adjust/2)</command>
      <comment>Rename the base layer to 'Original'</comment>
      <command>theLayer = theImage.layers[0]</command>
      <command>theLayer.name = 'Original'</command>
      <comment>Shrink the Canvas back to fit the layer</comment>
      <command>theImage.resize_to_layers()</command>
      <comment>Set grid to origin and size = image</comment>
      <command>pdb.gimp_image_grid_set_offset(theImage, 0, 0)</command>
      <command>pdb.gimp_image_grid_set_spacing(theImage, theImage.width, theImage.height)</command>
      <comment>Capture a new 'Color Layer'.  Move it to the bottom of the stack</comment>
      <comment>Save 'Color' so we can recover it at the end of the flow</comment>
      <comment>We don't have to worry if some of the filters skew the color.</comment>
      <comment>We can also use this to amp up the color</comment>
      <command>theImage.active_layer = theImage.layers[0]</command>
      <command>currentLayer = theImage.active_layer</command>
      <command>tempLayer = currentLayer.copy()</command>
      <command>theImage.add_layer(tempLayer, 0)</command>
      <command>pdb.gimp_desaturate_full(tempLayer, DESATURATE_LUMINOSITY)</command>
      <command>tempLayer.mode = GRAIN_EXTRACT_MODE</command>
      <command>colorLayer = pdb.gimp_layer_new_from_visible(theImage, theImage, 'ColorLayer')</command>
      <command>theImage.add_layer(colorLayer, len(theImage.layers))</command>
      <command>colorLayer.mode = GRAIN_MERGE_MODE</command>
      <command>theImage.remove_layer(tempLayer)</command>
      <command>theImage.active_layer = theImage.layers[0]</command>
      <comment>Create a Dynamic Range Layer and add it at the top of the stack</comment>
      <comment>Run autostretch_hsv leave mode Normal and at 100% opacity</comment>
      <comment>May have to use 'Curves' to tune up histogram</comment>
      <command>original = theImage.active_layer</command>
      <command>DynRange = original.copy()</command>
      <command>DynRange.name = "DynRange"</command>
      <command>theImage.add_layer(DynRange, 0)</command>
      <command>pdb.plug_in_autostretch_hsv(theImage, DynRange)</command>
      <comment>Add a new Retinex layer and apply the retinex filter with default settings</comment>
      <command>RetinexLayer = pdb.gimp_layer_new_from_visible(theImage, theImage, "Retinex")</command>
      <command>theImage.add_layer(RetinexLayer,0)</command>
      <comment>Retinex parameters - Scale = 240; ScaleDiv = 3; Level = 0; Dynamic = 1.2</comment>
      <command>pdb.plug_in_retinex(theImage, RetinexLayer, 240, 3, 0, 1.2)</command>
      <comment>Make the retinex layer B&amp;W - retinex distorts color</comment>
      <command>pdb.gimp_desaturate_full(RetinexLayer, 1)</command>
      <command>RetinexLayer.mode = OVERLAY_MODE</command>
      <command>RetinexLayer.opacity = 75.0</command>
      <comment>Adjust the opacity based on Property EnhanceContrastLevel</comment>
      <command>ContrastLevel = str(theImage.parasite_find('EnhanceContrastLevel'))</command>
      <command>if (ContrastLevel == 'EXTRA'): RetinexLayer.opacity = 100.0</command>
      <command>if (ContrastLevel == 'NORMAL'): RetinexLayer.opacity = 75.0</command>
      <command>if (ContrastLevel == 'MID'): RetinexLayer.opacity = 50.0</command>
      <command>if (ContrastLevel == 'NONE'): RetinexLayer.opacity = 0.0</command>
      <comment>Add a new Sharpend layer and apply the sharpening filter with default settings</comment>
      <command>SharpenLayer = pdb.gimp_layer_new_from_visible(theImage, theImage, "Sharpen")</command>
      <command>theImage.add_layer(SharpenLayer,0)</command>
      <comment>Sharpen parameters - Radius = 5.0; Amount = 0.5; Threshold = 0</comment>
      <command>pdb.plug_in_unsharp_mask(theImage, SharpenLayer, 5.0, 0.5, 0)</command>
      <comment>Adjust the opacity based on Property EnhanceContrastLevel</comment>
      <command>SharpenLayer.opacity = 75.0</command>
      <command>ContrastLevel = str(theImage.parasite_find('EnhanceContrastLevel'))</command>
      <command>if (ContrastLevel == 'EXTRA'): SharpenLayer.opacity = 100.0</command>
      <command>if (ContrastLevel == 'NORMAL'): SharpenLayer.opacity = 75.0</command>
      <command>if (ContrastLevel == 'MID'): SharpenLayer.opacity = 50.0</command>
      <command>if (ContrastLevel == 'NONE'): SharpenLayer.opacity = 0.0</command>
      <comment>Merge the work layers together and raise the color layer to the top</comment>
      <comment>First the Retinex layer</comment>
      <command>RetinexLayer = pdb.gimp_image_get_layer_by_name(theImage, 'Retinex')</command>
      <command>templayer = pdb.gimp_image_merge_down(theImage, RetinexLayer, EXPAND_AS_NECESSARY)</command>
      <comment>Then the Sharpen Layer</comment>
      <command>SharpenLayer = pdb.gimp_image_get_layer_by_name(theImage, 'Sharpen')</command>
      <command>newLayer = pdb.gimp_image_merge_down(theImage, SharpenLayer, EXPAND_AS_NECESSARY)</command>
      <command>newLayer.name = 'Contrast'</command>
      <comment>Desaturate the resultant layer</comment>
      <command>pdb.gimp_desaturate_full(newLayer, DESATURATE_LUMINOSITY)</command>
      <comment>Now grab the color layer and move it to the top</comment>
      <command>ColorLayer = pdb.gimp_image_get_layer_by_name(theImage, 'ColorLayer')</command>
      <command>pdb.gimp_image_raise_item_to_top(theImage, ColorLayer)</command>
      <command>ColorLayer.opacity = 80.0</command>
      <comment>Copy the Color Layer, call it ColorAdd, set opacity to 20%.  Adjust by hand as needed.</comment>
      <command>ColorAdd = pdb.gimp_layer_copy(ColorLayer, FALSE)</command>
      <command>theImage.add_layer(ColorAdd, 0)</command>
      <command>ColorAdd.name = 'ColorAdd'</command>
      <comment>Take a shot at adjusting the Color Layer based on Property EnhanceColorLevel</comment>
      <command>ColorLevel = str(theImage.parasite_find('EnhanceColorLevel'))</command>
      <comment>Set Color level opacity, first setting is default - if clauses fail.</comment>
      <command>ColorAdd.opacity = 20.0</command>
      <command>if (ColorLevel == 'EXTRA'): ColorAdd.opacity = 60.0</command>
      <command>if (ColorLevel == 'NORMAL'): ColorAdd.opacity = 40.0</command>
      <command>if (ColorLevel == 'MID'): ColorAdd.opacity = 20.0</command>
      <command>if (ColorLevel == 'NONE'): ColorAdd.opacity = 0.0</command>
      <command>theImage.attach_new_parasite('UpdateFlag', 5, 'YES')</command>
      </step>
    </flow>
  <flow>SemiAuto<step>Alignment<comment>Set up the grid for Rotate and or Perspective Transform</comment>
      <comment>Easier to do geometric operations with single layer</comment>
      <comment>This first step is run as part of the import jpeg</comment>
      <comment>In the console get ID with: theImage = gimp.image_list()[0]</comment>
      <comment>First set some variables and establish grid spacing and style</comment>
      <command>centerX = theImage.width/2</command>
      <command>centerY = theImage.height/2</command>
      <command>gridSpacing = max(theImage.width, theImage.height)/24</command>
      <command>pdb.gimp_image_grid_set_offset(theImage, centerX, centerY)</command>
      <command>pdb.gimp_image_grid_set_spacing(theImage, gridSpacing, gridSpacing)</command>
      <command>pdb.gimp_image_grid_set_style(theImage, GRID_ON_OFF_DASH)</command>
      <comment>Expand the canvas by 25 percent -easier use to rotate / perspective</comment>
      <command>adjust = max(theImage.height, theImage.width)/4</command>
      <command>theImage.resize(theImage.width + adjust, theImage.height+ adjust, adjust/2, adjust/2)</command>
      <comment>Rename the base layer to 'Original'</comment>
      <command>theLayer = theImage.layers[0]</command>
      <command>theLayer.name = 'Original'</command>
      </step>
    <step>FinalAdjust<comment>Shrink the Canvas back to fit the layer</comment>
      <command>theImage.resize_to_layers()</command>
      <comment>Set grid to origin and size = image</comment>
      <command>pdb.gimp_image_grid_set_offset(theImage, 0, 0)</command>
      <command>pdb.gimp_image_grid_set_spacing(theImage, theImage.width, theImage.height)</command>
      <comment>Capture a new 'Color Layer'.  Move it to the bottom of the stack</comment>
      <comment>Save 'Color' so we can recover it at the end of the flow</comment>
      <comment>We don't have to worry if some of the filters skew the color.</comment>
      <comment>We can also use this to amp up the color</comment>
      <command>theImage.active_layer = theImage.layers[0]</command>
      <command>currentLayer = theImage.active_layer</command>
      <command>tempLayer = currentLayer.copy()</command>
      <command>theImage.add_layer(tempLayer, 0)</command>
      <command>pdb.gimp_desaturate_full(tempLayer, DESATURATE_LUMINOSITY)</command>
      <command>tempLayer.mode = GRAIN_EXTRACT_MODE</command>
      <command>colorLayer = pdb.gimp_layer_new_from_visible(theImage, theImage, 'ColorLayer')</command>
      <command>theImage.add_layer(colorLayer, len(theImage.layers))</command>
      <command>colorLayer.mode = GRAIN_MERGE_MODE</command>
      <command>theImage.remove_layer(tempLayer)</command>
      <command>theImage.active_layer = theImage.layers[0]</command>
      <comment>Create a Dynamic Range Layer and add it at the top of the stack</comment>
      <comment>Run autostretch_hsv leave mode Normal and at 100% opacity</comment>
      <comment>May have to use 'Curves' to tune up histogram</comment>
      <command>original = theImage.active_layer</command>
      <command>DynRange = original.copy()</command>
      <command>DynRange.name = "DynRange"</command>
      <command>theImage.add_layer(DynRange, 0)</command>
      <command>pdb.plug_in_autostretch_hsv(theImage, DynRange)</command>
      <comment>Add a new Retinex layer and apply the retinex filter with default settings</comment>
      <command>RetinexLayer = pdb.gimp_layer_new_from_visible(theImage, theImage, "Retinex")</command>
      <command>theImage.add_layer(RetinexLayer,0)</command>
      <comment>Retinex parameters - Scale = 240; ScaleDiv = 3; Level = 0; Dynamic = 1.2</comment>
      <command>pdb.plug_in_retinex(theImage, RetinexLayer, 240, 3, 0, 1.2)</command>
      <comment>Make the retinex layer B&amp;W - retinex distorts color</comment>
      <command>pdb.gimp_desaturate_full(RetinexLayer, 1)</command>
      <command>RetinexLayer.mode = OVERLAY_MODE</command>
      <command>RetinexLayer.opacity = 75.0</command>
      <comment>Adjust the opacity based on Property EnhanceContrastLevel</comment>
      <command>ContrastLevel = str(theImage.parasite_find('EnhanceContrastLevel'))</command>
      <command>if (ContrastLevel == 'EXTRA'): RetinexLayer.opacity = 100.0</command>
      <command>if (ContrastLevel == 'NORMAL'): RetinexLayer.opacity = 75.0</command>
      <command>if (ContrastLevel == 'MID'): RetinexLayer.opacity = 50.0</command>
      <command>if (ContrastLevel == 'NONE'): RetinexLayer.opacity = 0.0</command>
      <comment>Add a new Sharpend layer and apply the sharpening filter with default settings</comment>
      <command>SharpenLayer = pdb.gimp_layer_new_from_visible(theImage, theImage, "Sharpen")</command>
      <command>theImage.add_layer(SharpenLayer,0)</command>
      <comment>Sharpen parameters - Radius = 5.0; Amount = 0.5; Threshold = 0</comment>
      <command>pdb.plug_in_unsharp_mask(theImage, SharpenLayer, 5.0, 0.5, 0)</command>
      <comment>Adjust the opacity based on Property EnhanceContrastLevel</comment>
      <command>SharpenLayer.opacity = 75.0</command>
      <command>ContrastLevel = str(theImage.parasite_find('EnhanceContrastLevel'))</command>
      <command>if (ContrastLevel == 'EXTRA'): SharpenLayer.opacity = 100.0</command>
      <command>if (ContrastLevel == 'NORMAL'): SharpenLayer.opacity = 75.0</command>
      <command>if (ContrastLevel == 'MID'): SharpenLayer.opacity = 50.0</command>
      <command>if (ContrastLevel == 'NONE'): SharpenLayer.opacity = 0.0</command>
      <comment>Merge the work layers together and raise the color layer to the top</comment>
      <comment>First the Retinex layer</comment>
      <command>RetinexLayer = pdb.gimp_image_get_layer_by_name(theImage, 'Retinex')</command>
      <command>templayer = pdb.gimp_image_merge_down(theImage, RetinexLayer, EXPAND_AS_NECESSARY)</command>
      <comment>Then the Sharpen Layer</comment>
      <command>SharpenLayer = pdb.gimp_image_get_layer_by_name(theImage, 'Sharpen')</command>
      <command>newLayer = pdb.gimp_image_merge_down(theImage, SharpenLayer, EXPAND_AS_NECESSARY)</command>
      <command>newLayer.name = 'Contrast'</command>
      <comment>Desaturate the resultant layer</comment>
      <command>pdb.gimp_desaturate_full(newLayer, DESATURATE_LUMINOSITY)</command>
      <comment>Now grab the color layer and move it to the top</comment>
      <command>ColorLayer = pdb.gimp_image_get_layer_by_name(theImage, 'ColorLayer')</command>
      <command>pdb.gimp_image_raise_item_to_top(theImage, ColorLayer)</command>
      <command>ColorLayer.opacity = 80.0</command>
      <comment>Copy the Color Layer, call it ColorAdd, set opacity to 20%.  Adjust by hand as needed.</comment>
      <command>ColorAdd = pdb.gimp_layer_copy(ColorLayer, FALSE)</command>
      <command>theImage.add_layer(ColorAdd, 0)</command>
      <command>ColorAdd.name = 'ColorAdd'</command>
      <comment>Take a shot at adjusting the Color Layer based on Property EnhanceColorLevel</comment>
      <command>ColorLevel = str(theImage.parasite_find('EnhanceColorLevel'))</command>
      <comment>Set Color level opacity, first setting is default - if clauses fail.</comment>
      <command>ColorAdd.opacity = 20.0</command>
      <command>if (ColorLevel == 'EXTRA'): ColorAdd.opacity = 60.0</command>
      <command>if (ColorLevel == 'NORMAL'): ColorAdd.opacity = 40.0</command>
      <command>if (ColorLevel == 'MID'): ColorAdd.opacity = 20.0</command>
      <command>if (ColorLevel == 'NONE'): ColorAdd.opacity = 0.0</command>
      </step>
    </flow>
  <flow>Standard<step>Alignment<comment>Set up the grid for Rotate and or Perspective Transform</comment>
      <comment>Easier to do geometric operations with single layer</comment>
      <comment>This first step is run as part of the import jpeg</comment>
      <comment>In the console get ID with: theImage = gimp.image_list()[0]</comment>
      <comment>First set some variables and establish grid spacing and style</comment>
      <command>centerX = theImage.width/2</command>
      <command>centerY = theImage.height/2</command>
      <command>gridSpacing = max(theImage.width, theImage.height)/24</command>
      <command>pdb.gimp_image_grid_set_offset(theImage, centerX, centerY)</command>
      <command>pdb.gimp_image_grid_set_spacing(theImage, gridSpacing, gridSpacing)</command>
      <command>pdb.gimp_image_grid_set_style(theImage, GRID_ON_OFF_DASH)</command>
      <comment>Expand the canvas by 25 percent -easier use to rotate / perspective</comment>
      <command>adjust = max(theImage.height, theImage.width)/4</command>
      <command>theImage.resize(theImage.width + adjust, theImage.height+ adjust, adjust/2, adjust/2)</command>
      <comment>Rename the base layer to 'Original'</comment>
      <command>theLayer = theImage.layers[0]</command>
      <command>theLayer.name = 'Original'</command>
      </step>
    <step>DynamicRange<comment>Shrink the Canvas back to fit the layer</comment>
      <command>theImage.resize_to_layers()</command>
      <comment>Set grid to origin and size = image</comment>
      <command>pdb.gimp_image_grid_set_offset(theImage, 0, 0)</command>
      <command>pdb.gimp_image_grid_set_spacing(theImage, theImage.width, theImage.height)</command>
      <comment>Capture a new 'Color Layer'.  Move it to the bottom of the stack</comment>
      <comment>Save 'Color' so we can recover it at the end of the flow</comment>
      <comment>We don't have to worry if some of the filters skew the color.</comment>
      <comment>We can also use this to amp up the color</comment>
      <command>theImage.active_layer = theImage.layers[0]</command>
      <command>currentLayer = theImage.active_layer</command>
      <command>tempLayer = currentLayer.copy()</command>
      <command>theImage.add_layer(tempLayer, 0)</command>
      <command>pdb.gimp_desaturate_full(tempLayer, DESATURATE_LUMINOSITY)</command>
      <command>tempLayer.mode = GRAIN_EXTRACT_MODE</command>
      <command>colorLayer = pdb.gimp_layer_new_from_visible(theImage, theImage, 'ColorLayer')</command>
      <command>theImage.add_layer(colorLayer, len(theImage.layers))</command>
      <command>colorLayer.mode = GRAIN_MERGE_MODE</command>
      <command>theImage.remove_layer(tempLayer)</command>
      <command>theImage.active_layer = theImage.layers[0]</command>
      <comment>Create a Dynamic Range Layer and add it at the top of the stack</comment>
      <comment>Run autostretch_hsv leave mode Normal and at 100% opacity</comment>
      <comment>May have to use 'Curves' to tune up histogram</comment>
      <command>original = theImage.active_layer</command>
      <command>DynRange = original.copy()</command>
      <command>DynRange.name = "DynRange"</command>
      <command>theImage.add_layer(DynRange, 0)</command>
      <command>pdb.plug_in_autostretch_hsv(theImage, DynRange)</command>
      </step>
    <step>Retinex-Filter<comment>Add a new Retinex layer and apply the retinex filter with default settings</comment>
      <command>RetinexLayer = pdb.gimp_layer_new_from_visible(theImage, theImage, "Retinex")</command>
      <command>theImage.add_layer(RetinexLayer,0)</command>
      <comment>Retinex parameters - Scale = 240; ScaleDiv = 3; Level = 0; Dynamic = 1.2</comment>
      <command>pdb.plug_in_retinex(theImage, RetinexLayer, 240, 3, 0, 1.2)</command>
      <comment>Make the retinex layer B&amp;W - retinex distorts color</comment>
      <command>pdb.gimp_desaturate_full(RetinexLayer, 1)</command>
      <command>RetinexLayer.mode = OVERLAY_MODE</command>
      <command>RetinexLayer.opacity = 75.0</command>
      <comment>Adjust the opacity based on Property EnhanceContrastLevel</comment>
      <command>ContrastLevel = str(theImage.parasite_find('EnhanceContrastLevel'))</command>
      <command>if (ContrastLevel == 'EXTRA'): RetinexLayer.opacity = 100.0</command>
      <command>if (ContrastLevel == 'NORMAL'): RetinexLayer.opacity = 75.0</command>
      <command>if (ContrastLevel == 'MID'): RetinexLayer.opacity = 50.0</command>
      <command>if (ContrastLevel == 'NONE'): RetinexLayer.opacity = 0.0</command>
      </step>
    <step>Sharpen<comment>Add a new Sharpend layer and apply the sharpening filter with default settings</comment>
      <command>SharpenLayer = pdb.gimp_layer_new_from_visible(theImage, theImage, "Sharpen")</command>
      <command>theImage.add_layer(SharpenLayer,0)</command>
      <comment>Sharpen parameters - Radius = 5.0; Amount = 0.5; Threshold = 0</comment>
      <command>pdb.plug_in_unsharp_mask(theImage, SharpenLayer, 5.0, 0.5, 0)</command>
      <comment>Adjust the opacity based on Property EnhanceContrastLevel</comment>
      <command>SharpenLayer.opacity = 75.0</command>
      <command>ContrastLevel = str(theImage.parasite_find('EnhanceContrastLevel'))</command>
      <command>if (ContrastLevel == 'EXTRA'): SharpenLayer.opacity = 100.0</command>
      <command>if (ContrastLevel == 'NORMAL'): SharpenLayer.opacity = 75.0</command>
      <command>if (ContrastLevel == 'MID'): SharpenLayer.opacity = 50.0</command>
      <command>if (ContrastLevel == 'NONE'): SharpenLayer.opacity = 0.0</command>
      </step>
    <step>ColorAdjust<comment>Merge the work layers together and raise the color layer to the top</comment>
      <comment>First the Retinex layer</comment>
      <command>RetinexLayer = pdb.gimp_image_get_layer_by_name(theImage, 'Retinex')</command>
      <command>templayer = pdb.gimp_image_merge_down(theImage, RetinexLayer, EXPAND_AS_NECESSARY)</command>
      <comment>Then the Sharpen Layer</comment>
      <command>SharpenLayer = pdb.gimp_image_get_layer_by_name(theImage, 'Sharpen')</command>
      <command>newLayer = pdb.gimp_image_merge_down(theImage, SharpenLayer, EXPAND_AS_NECESSARY)</command>
      <command>newLayer.name = 'Contrast'</command>
      <comment>Desaturate the resultant layer</comment>
      <command>pdb.gimp_desaturate_full(newLayer, DESATURATE_LUMINOSITY)</command>
      <comment>Now grab the color layer and move it to the top</comment>
      <command>ColorLayer = pdb.gimp_image_get_layer_by_name(theImage, 'ColorLayer')</command>
      <command>pdb.gimp_image_raise_item_to_top(theImage, ColorLayer)</command>
      <command>ColorLayer.opacity = 80.0</command>
      <comment>Copy the Color Layer, call it ColorAdd, set opacity to 20%.  Adjust by hand as needed.</comment>
      <command>ColorAdd = pdb.gimp_layer_copy(ColorLayer, FALSE)</command>
      <command>theImage.add_layer(ColorAdd, 0)</command>
      <command>ColorAdd.name = 'ColorAdd'</command>
      <comment>Take a shot at adjusting the Color Layer based on Property EnhanceColorLevel</comment>
      <command>ColorLevel = str(theImage.parasite_find('EnhanceColorLevel'))</command>
      <comment>Set Color level opacity, first setting is default - if clauses fail.</comment>
      <command>ColorAdd.opacity = 20.0</command>
      <command>if (ColorLevel == 'EXTRA'): ColorAdd.opacity = 60.0</command>
      <command>if (ColorLevel == 'NORMAL'): ColorAdd.opacity = 40.0</command>
      <command>if (ColorLevel == 'MID'): ColorAdd.opacity = 20.0</command>
      <command>if (ColorLevel == 'NONE'): ColorAdd.opacity = 0.0</command>
      </step>
    </flow>
  </combined>