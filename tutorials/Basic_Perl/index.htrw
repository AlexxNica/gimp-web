<!--#include virtual="/includes/wgo-xhtml-init.xhtml" -->
<title>GIMP - Basic Perl</title>
<!--#include virtual="/includes/wgo-look-feel.xhtml" -->
<!--#include virtual="/includes/wgo-page-init.xhtml" -->
<h1>Basic Perl</h1>
<p>
  Text and images Copyright (C) 2002 <a href="mail:People-Grobgeld_Dov">Dov Grobgeld</a> and may not be used without permission of the author.
</p>

<h2>Intention</h2>
<p>
  One of the wonderful features of GIMP is that all its functionality may be accessed through scripting. 
  So far most of the script programming for GIMP has been done using Scheme through Script-Fu. 
  Unfortunately the Scheme environment GIMP provides is very primitive, e.g. without any reasonable error handling. 
  Furthermore, must users are not familiar with Scheme as a language. Some users may therefore prefer to write scripts for the GIMP in Perl.
</p>
<p>
  Perl as a language is probably more familiar to web-literate users as it is the major language for writing CGI scripts. 
  Now, GIMP scripts may also be written with Perl. This tutorial will describe how to write such plug-ins and scripts for GIMP.
</p>
<p>
  As there are several excellent tutorial texts describing the Perl language, this tutorial will assume a working knowledge of Perl, 
  and will instead concentrate on the use of GIMP together with the use of the Perl modules Gimp and Gimp::Fu, 
  written by Marc Lehmann <a href="mail:People-Lehmann_Marc">pcg@goof.com</a>.
</p>

<p>
  <b>NOTE:</b> This tutorial was originally written for a 1.2 version of GIMP. It was proofread and some updates were applied as of March 22, 2007. 
  However, the sample scripts which are shown on this page have not been re-tested to verify that they will work with the current 2.2 version of GIMP.
</p>

<h2>1. What You Need</h2>
<p>
  The Perl::Gimp tutorial scripts have been tested with the following versions:
</p>
<ol>
  <li>GIMP version 1.2 or later, with all its prerequisites.</li>
  <li>Perl version 5.005 or later.</li>
  <li>The Perl module Gtk, version 0.7003</li>
  <li>The Gimp module, version 1.201 or later</li>
</ol>
<p>
  Perl and all its associated modules are available in source form from the Perl Comprehensive Archive Network, CPAN.
  It is also possible to download them in RPM format from the ftp.gimp.org website.
</p>

<h2>2. The Gimp module</h2>
<p>
  Most scripts make use of the simplified interface Gimp::Fu provides with the GIMP module. 
  Gimp::Fu provides a framework for entering parameters to the script in a frame like interface, 
  just like Script-Fu, but also allows running of the script in batch mode from the command line. 
  This tutorial will go into a detailed description of the construction of a Gimp::Fu script but,
  before we do this, here is the general framework of a Perl-Fu script.
</p>
<pre class="code">
  #!/usr/local/bin/perl 
  use Gimp ":auto"; 
  use Gimp::Fu;
  # Register extension to GIMP
  register ... ;
  exit main();  # Handle over control to GIMP 
</pre>
<p>
  The interesting items to note in the script are the use of the two modules Gimp and Gimp::Fu, 
  the register function (which will be described in detail below), and the way control is handed over to the Gimp module on line 6. 
  The use of the ":auto" statement makes Perl automatically include all of the GIMP PDB functions and constants into the Perl name space.
</p>

<h2>3. The GIMP PDB</h2>
<p>
  Before going into the details of the Perl-Fu script, we will describe how to access the various functions of GIMP. 
  All functions known to GIMP are available through the procedural database (PDB). All the PDB functions may be called from Perl, as will be seen below. 
  These PDB functions are either internal to GIMP, or have been made available through a plug-in or a script extension. As far as the caller is concerned
  there is no difference. As we will see below, when a Perl function is registered through the register function it will appear in the PDB as well.
</p>
<p>
  GIMP/Perl comes with a PDB browser available in <span class="filter">Xtns -&gt; PDB Explorer</span>. 
  (There is another PDB browser available in <span class="filter">Xtns -&gt; DB Browser</span> but the PDB Explorer is more suited for Perl users.) 
  This browser provides a way of seeing all the functions in the PDB, as well as their input and output parameters. 
  E.g. the PDB Explorer entry for gimp_image_new, which will be used in the example below looks like this:
</p>

<table><tbody>
    <tr><td style="background: #e0e0e0 none;">
        <table><tbody>
            <tr><th valign=top align=right>Name:</th><td style="background: #e0e0ff none;" colspan=3>gimp_image_new</td></tr>
            <tr><th valign=top align=right>Blurb:</th><td valign=top colspan=3>Creates a new image with the specified width, height, and type.</td></tr>
            <tr><th valign=top align=right valign=top>In:</th><td valign=top>INT32</td><td valign=top>width</td><td valign=top>The width of the image</td></tr>
            <tr><th valign=top></th><td valign=top>INT32</td><td valign=top>height</td><td valign=top>The height of the image</td></tr>
            <tr><th valign=top></th><td valign=top>INT32</td><td valign=top>type</td><td valign=top>The type of image { RGB (0), GRAY (1), INDEXED (2) }</td></tr>
            <tr><th valign=top align=right>Out:</th></tr><tr><td></td><td valign=top>IMAGE</td><td valign=top>image</td><td valign=top>The ID of the newly created image</td></tr>
            <tr><th valign=top valign=top>Help:</th><td colspan=3>Creates a new image, undisplayed with the specified extents and type. A layer should be created and added before this image is displayed, 
or subsequent calls to 'gimp_display_new' with this image as an argument will fail. Layers can be created using the 'gimp_layer_new' command. 
They can be added to an image using the 'gimp_image_add_layer' command
              </td></tr>
          </tbody></table>
        </td></tr>
</tbody></table>

<p>
  All the the constants mentioned in the PDB Explorer have been defined within Gimp::Fu and may be used within Perl. 
  E.g. a call to create a new image of size 100x150 of type RGB looks as follows:
</p>

<pre class="code">$img = gimp_image_new(100, 150, RGB)</pre>

<p>
  The PDB entry above shows that gimp_image_new is called with three parameters (width, height, type). 
  These are all of type INT32. This type, and other types, will be explained below.
</p>
<p>
  Script-Fu scripts are called just like any other script according to the PDB signature in the PDB browser. E.g. to run the Script-Fu Basic One logo just do:
</p>

<pre>script_fu_basic1_logo("Hello", 72,
                      "-*-utopia-*-r-*-*-72-*-*-*-*-*-*-*",
                      [0,0,0],[1,1,1]);</pre>
<p>
  Unfortunately, as of this writing, calling Script-Fu from Perl has proved to make both Script-Fu and GIMP very unstable and caused both of them to crash. 
  If any of the readers is able to describe what is needed to get it to run successfully, I will happily include this in a future version of this tutorial.
</p>
<p>
  <b>NOTE:</b> When calling a PDB function from Perl::Gimp that has an image and a drawable as the two first arguments, 
  only the drawable should be given as argument in the calling sequence.
</p>

<h2>4. Gimp::Fu and the register function</h2>
<p>
  Gimp::Fu is Perl's answer to Script-Fu. It provides a simplified method for accepting parameters for a script through a Gtk interface, 
  just like Script-Fu, but as we shall see below, it has some additional bells and whistles.
   <br /><br />
  The main function for a Gimp::Fu script is the register function. This function declares the interface of the script to GIMP. 
  The register function takes the following 10 parameters, that must all be provided:
</p>
<ol>
  <li>The name of the function - a string. This is the name of the function as it will be known in the PDB.</li>
  <li>A small description - a string</li>
  <li>A help text - a string</li>
  <li>The authors name - a string</li>
  <li>The copyright of the script - a string</li>
  <li>Creation date - a string</li>
  <li>Menu path - a string. The path has one of the two forms:
    <ol>
      <li>"&lt;Toolbox&gt;/Xtns/Perl-Fu/Script Name"</li>
      <li>"&lt;Image&gt;/Perl-Fu/Script Name"</li>
    </ol>
     If form 1. is given, then the script is a standalone script that appears in the menu hierarchy under Xtns/Perl-Fu and takes 
     all of its inputs through the Gimp::Fu interface frame. If form 2. is given, on the other hand, the script is tied to the 
     image menu popped up through use of the right-hand mouse button over any image. In this case Gimp::Fu will add, as the first
     two parameters to the script, the ID of the image and the drawable which was active when the script was invoked.
  </li>
  <li>
    The acceptable image types - a string. This list contains a list
    of image types acceptable. This field is only used for scripts
    that are in the "&lt;Image&gt;" hierarchy. For images in the
    &lt;Toolbox&gt; hierarchy, this should be an empty string.
    Possible values are listed in the table below:
    <table><tbody>
        <tr><th style="background: #dfdfdf none;">value</th><th style="background: #dfdfdf none;">meaning</th></tr>
        <tr><td style="background: #dfdfee none;" valign=top>*   </td><td style="background: #dfdfee none;" valign=top>Any images are accepted</td></tr>
        <tr><td style="background: #dfdfee none;" valign=top>RGB </td><td style="background: #dfdfee none;" valign=top>RGB images</td></tr>
        <tr><td style="background: #dfdfee none;" valign=top>RGBA</td><td style="background: #dfdfee none;" valign=top>RGB images with alpha channels</td></tr>
        <tr><td style="background: #dfdfee none;" valign=top>GREY</td><td style="background: #dfdfee none;" valign=top>Grey level images</td></tr>
      </tbody></table>
  </li>
  
  <li>
    Parameters - A reference to an array of parameters. (A reference
    to an array in Perl is simply an array written within square
    brackets). Each parameter in turn is a reference to an array
    containing the following four or five values:
    <ol>
      <li>
        The type of the parameter. The types recognized by Gimp::Fu
        and Perl are given in the following table:
        <table><tbody>
            <tr>
              <th style="background: #dfdfdf none;">Type</th>
              <th style="background: #dfdfdf none; width: 30%;">Possible forms</th>
              <th style="background: #dfdfdf none; width: 50%;">Comment</th>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>
                PF_INT<br />
                PF_INT32<br />
                PF_INT16<br />
                PF_INT8<br />
              </td>
              <td style="background: #dfdfee none;" valign=top>42</td>
              <td style="background: #dfdfee none;" valign=top>A number. PF_INT is a synonym to PF_INT32.</td>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>
                PF_VALUE<br />
                PF_FLOAT<br />
              </td>
              <td style="background: #dfdfee none;" valign=top>3.141</td>
              <td style="background: #dfdfee none;" valign=top>A floating point number.</td>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>
                PF_TOGGLE<br />
                PF_BOOLEAN
              </td>
              <td style="background: #dfdfee none;" valign=top>
                0<br />
                1
              </td>
              <td style="background: #dfdfee none;" valign=top>
                A boolean value.
              </td>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>
                PF_SLIDER<br />
                PF_SPINNER
              </td>
              <td style="background: #dfdfee none;" valign=top>
                An integer value through a slider and a spinner
                interface. The range parameter should be specified and
                is interpreted as minimum, maximum, and step,
                e.g. [0,100,1].
              </td>
              <td style="background: #dfdfee none;" valign=top>
                <img src="tpix.gif" width=0 alt="" />
              </td>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>PF_FONT</td>
              <td style="background: #dfdfee none;" valign=top>-*-blippo-*-*-*-*-24-*-*-*-*-*-*-*</td>
              <td style="background: #dfdfee none;" valign=top>A font in X11 font format. This interface launches a font browser.</td>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>PF_STRING</td>
              <td style="background: #dfdfee none;" valign=top>"A string"</td>
              <td style="background: #dfdfee none;" valign=top>A string</td>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>
                PF_COLOR<br />
                PF_COLOUR
              </td>
              <td style="background: #dfdfee none;" valign=top>
                [255,127,0]<br />
                <tt>#ff7f00</tt>
              </td>
              <td style="background: #dfdfee none;" valign=top>
                A color may either be expressed as a reference to an
                array of three components, or as a hexadecimal
                triple, proceeded by the hash sign.
              </td>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>PF_TOGGLE</td>
              <td style="background: #dfdfee none;" valign=top>0<br />1</td>
              <td style="background: #dfdfee none;" valign=top>A boolean toggle</td>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>PF_IMAGE</td>
              <td style="background: #dfdfee none;" valign=top>-</td>
              <td style="background: #dfdfee none;" valign=top>An image</td>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>PF_DRAWABLE</td>
              <td style="background: #dfdfee none;" valign=top>-</td>
              <td style="background: #dfdfee none;" valign=top>A drawable.</td>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>PF_BRUSH</td>
              <td style="background: #dfdfee none;" valign=top><img src="tpix.gif" width=0 alt="" /></td>
              <td style="background: #dfdfee none;" valign=top>A brush</td>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>PF_GRADIENT</td>
              <td style="background: #dfdfee none;" valign=top><img src="tpix.gif" width=0 alt="" /></td>
              <td style="background: #dfdfee none;" valign=top>A gradient</td>
            </tr>
            <tr>
              <td style="background: #dfdfee none;" valign=top>PF_PATTERN</td>
              <td style="background: #dfdfee none;" valign=top><img src="tpix.gif" width=0 alt="" /></td>
              <td style="background: #dfdfee none;" valign=top>A pattern</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>The name of the parameter - a string</li>
      <li>A help text for the parameter</li>
      <li>Default value for the parameter. This should be given in the form listed in the table above.</li>
      <li>An array defining allowed range for the value. This is only possible for PF_SLIDER and PF_SPINNER.</li>
    </ol>
  </li>
  <li>A reference to an array of return types of the sub in the 11th parameter.</li>
  <li>
    The sub to be called - a reference to a sub . This subroutine will be called with the associated menu entry declared through the Menu path described above. 
    When the sub is called it is passed as arguments the list of parameters declared in field 9, described above, and in the case of a "&lt;Image&gt;..." script, 
    the active image and layer as first and second parameters.
    <br />
    A reference to a sub in Perl may be declared in two ways. You can declare a subroutine at a different place in the source file 
    (e.g. sub run) and reference it by writing \&amp;run. An alternative way is to write it inline by simply writing:
    <br />
    <pre>sub { ($text, $color) = @_ ; ... }</pre>
    <br />
    The sub is expected not need to display a new image after it has created it.
    Instead it is expected to return the new image or images that were created in accordance with the return types declared in parameter 10 of the register call described above.
    This behaviour has been added in order to be able to call the sub non-interactively. More about that behaviour below.
  </li>
</ol>

<h2>4.2 A commented script</h2>
<p>
  The following Gimp::Fu script example shows the steps described in the previous section. 
  It registers a script that takes two values, the size of the image and a color, and then produces an image of the requested size with the requested color. 
  Quite useless but it shows the important steps of how to register a script, how to create a new image, and how to access some PDB functions.
</p>
<pre class="code">
  #!/usr/local/bin/perl -w
  use Gimp ":auto";
  use Gimp::Fu;
  sub img_uni {
      my ($size, $color) = @_;
      # Create a new image
      $img = gimp_image_new($size, $size, RGB);
      # Create a new layer
      $layer = gimp_layer_new($img, $size, $size, RGB,
                              "Layer 1", 100, NORMAL_MODE);
      # add the layer to the image
      gimp_image_add_layer($img, $layer, -1);
      # Set the background to the required color
      gimp_palette_set_background($color);
      # Paint the layer
      gimp_edit_fill($layer, BG_IMAGE_FILL);
      # Return the image
      return $img;
  }
  register
        "img_uni",                 # fill in name
        "Create a uniform image",  # a small description
        "A tutorial script",       # a help text
        "Dov Grobgeld",            # Your name
        "Dov Grobgeld (c)",        # Your copyright
        "1999-05-14",              # Date
        "&lt;Toolbox&gt;/Xtns/Perl-Fu/Tutorial/Img Uni",   # menu path
        "",
        [ 
         [PF_INT,   "size", "Img size", 100],
         [PF_COLOR, "color", "Img color", [255,127,0]] 
        ],
        \&amp;img_uni;
  exit main();
</pre>
<p>
  Most of these commands are directly copied out the PDB.
  <br />
  <br />
  This script shows the essential steps of producing a stand-alone script:
</p>
<table><tbody>
    <tr><th>line(s)</th><th>Description</th></tr>
    <tr><td>10     </td><td>Creating a new image.</td></tr>
    <tr><td>13-14  </td><td>Creating one or more layers.</td></tr>
    <tr><td>17     </td><td>Attaching the layer to the image. </td></tr>
    <tr><td>19-23  </td><td>Do some painting operations in the layers. </td></tr>
    <tr><td>26     </td><td>Return the image to the caller</td></tr>
    <tr><td> 29-42 </td><td>Registration of the extension</td></tr>
</tbody></table>
<p>
  To test the script, save it in the directory <b>$HOME/.gimp-2.2/plug-ins</b>. It must then be made executable through the command:
  <br />
  <br />
  <b>chmod +x $HOME/.gimp-2.2/plug-ins/uni</b>
  <br />
  <br />
  Then start GIMP. It is generally a good idea to test the syntax of the script with Perl -c before starting GIMP. 
  (A more official way to add scripts is to use the gimptool --install-bin command).
</p>
<p>
  <b>Note:</b> It is not possible to add scripts once GIMP is running. 
  On the other hand, it is possible to change a script which has already been registered, as long as the parameters don't change.
</p>
<p class="images">
  <img src="uni-menu.png" alt=""/>
</p>
<p>
  The script is now accessible through the menu system through the <b>Xtns</b> top menu.
</p>
<p class="images">
  <img src="uni-entry.png" alt=""/>
</p>
<p>
  When choosing this menu entry the following screen is popped up.
</p>
<p class="images">
  <img src="uni-result.png" alt=""/>
</p>
<p>
  Choosing the default values creates a result like the image above.
</p>

<h2>5. Object oriented syntax</h2>
<p>
  Gimp::Fu provides an alternative object-oriented syntax for the image and the drawable commands. 
  Here is a table showing the procedural vs the object oriented syntax for a few commands:
</p>
<table><tbody>
    <tr><th style="background: #E0E0E0 none;">procedural syntax</th>
      <th style="background: #E0E0E0 none;">object oriented syntax</th>
    </tr>
    <tr>
      <td style="background: #FFE0E0 none;">gimp_image_add_layer($drw,-1);</td>
      <td style="background: #FFE0E0 none;">$img-&gt;add_layer($drw, -1);</td>
    </tr>
    <tr>
      <td style="background: #FFE0E0 none;">gimp_drawable_width($drw);</td>
      <td style="background: #FFE0E0 none;">$drw-&gt;width();</td>
      </tr>
  </tbody></table>
<p>
  The substitution rule for converting a PDB function call into a method is as simple as erasing ``gimp_image_'' from the beginning of the function call 
  and calling this method through the image object. Similarly for the gimp_drawable_... functions.
</p>
<p>
  Note that the object oriented syntax is only syntactic sugar that makes the calling syntax cleaner in some cases. 
  The error messages are still given in the procedural format.
</p>

<h2>6. Painting areas with selections</h2>
<p>
  In the uni script the function gimp_edit_fill was called to fill the whole image. Looking at the info for gimp_edit_fill in the PDB browser we find the following:
</p>

  <table><tbody>
    <tr><td style="background: #e0e0e0 none;">
        <table><tbody>
            <tr><th valign=top align=right>Name:</th><td style="background: #e0e0ff none;" colspan=3>gimp_edit_fill</td></tr>
            <tr><th valign=top align=right>Blurb:</th><td valign=top colspan=3>Fill selected area of drawable</td></tr>
            <tr>
              <th valign=top align=right valign=top>In:</th>
              <td valign=top>DRAWABLE</td>
              <td valign=top>drawable</td>
              <td valign=top>The drawable to fill from</td>
            </tr>
            <tr>
              <th valign=top></th><td valign=top>INT32</td><td valign=top>fill_type</td>
              <td valign=top>The type of fill: FG_IMAGE_FILL (0), BG_IMAGE_FILL (1), WHITE_IMAGE_FILL (2), TRANS_IMAGE_FILL (3), NO_IMAGE_FILL (4)</td>
            </tr>
            <tr><th valign=top valign=top>Help:</th><td colspan=3>
                This procedure fills the specified drawable with the fill mode. If the
                fill mode is foreground, the current foreground color is used. If the
                fill mode is background, the current background color is used. Other
                fill modes should not be used. This procedure only affects regions
                within a selection if there is a selection active.
              </td>
            </tr>
          </tbody></table>
      </td></tr>
  </tbody></table>

<p>
  Thus, if a selection is active when gimp_edit_fill is called only the selection is painted. 
  There are lots of ways of choosing a selection as can be seen when searching for a ``select'' in the PDB. 
  The example below uses gimp_rect_select, whose entry in the PDB looks as follows:
</p>

<table><tbody>
    <tr><td style="background: #e0e0e0 none;">
        <table><tbody>
            <tr><th valign=top align=right>Name:</th><td style="background: #e0e0ff none;" colspan=3>gimp_rect_select</td></tr>
            <tr><th valign=top align=right>Blurb:</th><td valign=top colspan=3>Create a rectangular selection over the specified image</td></tr>
            <tr><th valign=top align=right valign=top>In:</th><td valign=top>IMAGE</td><td valign=top>image</td><td valign=top>The image</td></tr>
            <tr><th valign=top></th><td valign=top>FLOAT</td><td valign=top>x</td><td valign=top>x coordinate of upper-left corner of rectangle</td></tr>
            <tr><th valign=top></th><td valign=top>FLOAT</td><td valign=top>y</td><td valign=top>y coordinate of upper-left corner of rectangle</td></tr>
            <tr><th valign=top></th><td valign=top>FLOAT</td><td valign=top>width</td><td valign=top>the width of the rectangle: width &gt; 0</td></tr>
            <tr><th valign=top></th><td valign=top>FLOAT</td><td valign=top>height</td><td valign=top>the height of the rectangle: width &gt; 0</td></tr>
            <tr><th valign=top></th><td valign=top>INT32</td><td valign=top>operation</td><td valign=top>the selection operation: {ADD (0), SUB(1), REPLACE (2), INTERSECT (3) }</td></tr>
            <tr><th valign=top></th><td valign=top>INT32</td><td valign=top>feather</td><td valign=top>feather option for selections</td></tr>
            <tr><th valign=top></th><td valign=top>FLOAT</td><td valign=top>feather_radius</td><td valign=top>radius for feather operation</td></tr>
            <tr><th valign=top valign=top>Help:</th>
              <td colspan=3>
                This tool creates a rectangular selection over the
                specified image. The rectangular region can be either
                added to, subtracted from, or replace the contents of
                the previous selection mask. If the feather option is
                enabled, the resulting selection is blurred before
                combining. The blur is a gaussian blur with the
                specified feather radius.
              </td>
            </tr>
          </tbody></table>
      </td>
    </tr>
</tbody></table>

<p>
  A simple use of this function which selects a rectangle in the middle of an image and paints that rectangle with a user defined color. 
  This example also introduces a couple of new features we haven't seen before:
</p>
<ul>
  <li>The script is associated with an image since its menu path starts with "&lt;Image&gt;/...". 
  Note that as a result of this the callback sub in line 13 receives two additional parameters, the active image and the seleced drawable.</li>
  <li>The use of a subroutine without a name as a parameter to register</li>
  <li>The use of the PDB functions gimp_undo_push_group_start and gimp_undo_push_group_end. These functions declare an undo group. 
  When an undo is done on the image, instead of having the individual operators undo, all the actions between the undo start and the 
  undo group calls will be undone at once.</li>
  <li>The return type of the register function defines what new images should be displayed by GIMP. 
  In this case we don't want to display any new images and therefore return an empty array.</li>
</ul>

<pre class="code">
#!/usr/local/bin/perl -w
use Gimp ":auto";
use Gimp::Fu;
register
    "img_paint_select",
    "Paints the selection", "Paints the selection",
    "Dov Grobgeld", "Dov Grobgeld", "1999-05-14",
    "&lt;Image&gt;/Perl-Fu/Tutorial/Paint Select",
    "*",
    [
     [PF_COLOR, "color", "Rectangle color", [0,0,255]] ],
    sub {
        my($img, $layer, $color) = @_;
        my($width, $height) = (gimp_image_width($img),
                               gimp_image_height($img));
        # Select a rectangle inside the image and paint it with color
        gimp_undo_push_group_start($img);
        gimp_rect_select($img,
                         $width/4, $height/4, $width/2, $height/2,
                         REPLACE, 0,0);
        gimp_palette_set_background($color);
        gimp_edit_fill($layer, BG_IMAGE_FILL);
        gimp_selection_none($img);
        gimp_displays_flush();
        gimp_undo_push_group_end($img);
   # Tell GIMP not to display a new image
   return ();
     };
exit main();
</pre>
<p class="images">
  <img src="paint-select.png" alt=""/>
</p>
<p>
  The result when run on our previous image.
</p>

<h2>6.1 Complex selections</h2>
<p>
  Besides rectangular selections elliptical selections may also be created through the PDB functions 
  gimp_ellipse_select() and gimp_free_select() which allows the selection of ellipses and polygons.
</p>
<p>
  More complex selections may be created through the channel mechanism. The PDB gimp_channel_new() creates a new channel. 
  The channel is a drawable that may be painted into, just like any other drawable, but with the difference that it is always a grey level image. 
  Once the channel is finished, the channel may be loaded into the selection through the PDB function gimp_selection_load().
</p>
<p>
  Search for ``select'' in the DB Browser to see a list of all the selection related functions.
</p>

<h2>6.2 Loops</h2>
<p>
  In Perl it is trivial to write loops that, together with the various selecton tools, give powerful creative possibilities. 
  Here is an example that mixes colors in circles. There is nothing really new here, but it shows the power of what we have described above.
</p>
<pre class="code">
#!/usr/local/bin/perl
use Gimp ":auto";
use Gimp::Fu;
sub circles {
    my ($size, $bgcolor, $radius) = @_;
    # Create the background
    $img = gimp_image_new($size, $size, RGB);
    $layer = gimp_layer_new($img, $size, $size, RGB,
                            "Layer 1", 100, NORMAL_MODE);
    gimp_image_add_layer($layer, -1);
    gimp_palette_set_background($bgcolor);
    gimp_edit_fill($layer, BG_IMAGE_FILL);
    my $ncircles = int($size/$radius/2);
    for ($i=0; $i&lt;$ncircles; $i++) {
        for ($j=0; $j&lt;$ncircles; $j++) {
            # Be creative and mix colors
            $color = [$i*30, ($ncircles-$j)*25, ($i+$j)*15];
            # Select a circle
            gimp_ellipse_select($img,
                                $i*$radius*2, $j*$radius*2,
                                $radius*2, $radius*2,
                                REPLACE, 1, 0, 0);
            # Paint the color in the circle
            gimp_palette_set_background($color);
            gimp_edit_fill($layer, BG_IMAGE_FILL);
            gimp_selection_none($img);
        }
    }
    return $img;
}
# register the script
register "circles", "a loop", "a loop", "Dov", "Dov", "1999-05-14",
    "&lt;Toolbox&gt;/Xtns/Perl-Fu/Tutorial/Circles",
    "",
    [
     [PF_INT32, "size", "Img size", 100],
     [PF_COLOR, "bg", "Background color", [40,180,60]],
     [PF_INT32, "radius", "Circle radius", 10]
    ],
    \&amp;circles;
exit main();
</pre>
<p class="images">
  <img src="circles.png" alt=""/>
</p>
<p>
  The result.
</p>

<h2>7. Creating text, Hello World - writing text in an image</h2>
<p>
  To create text the PDB function gimp_text_fontname() may be used. In this function the font is specified in the X11 font conventions. 
  (There are also some older functions, gimp_text and gimp_text_ext in which the different X11 fields are specified explicitly.)
  Here is an example of a script that creates an image containing "Hello world".
</p>
<pre class="code">
#!/usr/local/bin/perl
use Gimp ":auto";
use Gimp::Fu;
sub text1 {
    my($font, $text) = @_;
    # Create a new image
    $img = gimp_image_new(350, 100, RGB);
    # Create a new layer and draw it to the image at the top
    $drw = gimp_layer_new($img, $img-&gt;width, $img-&gt;height,
                    RGB, "BG", 100, NORMAL_MODE);
    $drw-&gt;add_layer(-1);
    gimp_palette_set_background("black");
    gimp_edit_fill($drw, BG_IMAGE_FILL);
    # Choose color of text
    gimp_palette_set_foreground([255,255,0]);
    # Create the text
    my $border = 10;
    my $text_layer = gimp_text_fontname($drw,  0, 0, $text,
                                  $border, 1,
                                  xlfd_size($font), $font);
    gimp_floating_sel_anchor($text_layer);
    return $img;
}
# register the script
register "hello_world1", "basic text", "basic text", "Dov", "Dov",
    "1999-05-14",
    "&lt;Toolbox&gt;/Xtns/Perl-Fu/Tutorial/Basic text 1",
    "",
    [
     [PF_FONT, "font", "font", "-*-utopia-bold-r-*-*-70-*-*-*-*-*-*-*"],
     [PF_STRING, "text", "text", "Hello world!"]
    ],
    \&amp;text1;
# Handle over control to GIMP
exit main();
</pre>
<p class="images">
  <img src="hello-world1.png" alt=""/>
</p>
<p>
  The result above:
</p>
<p>
  The script makes use of the function xlfd_size which extracts the size of the font from the X11 font name. 
  This is necessary as the authors of gimp_text_fontname decided that the font size within the fontname is ignored.
</p>
<p>
  One thing to note in this script is that the text that is created on line 24 is a floating layer, than needs to be anchored to its parent layer. 
  This is done in line 27 through the call to gimp_floating_sel_anchor().
</p>
<p>
  This script suffers from the problem that the image size is unrelated to the text size. 
  This is taken care of in the following more complex example which shows the basic steps for a logo generating script.
</p>
<ul>
  <li>Creation of an image arbitrary size</li>
  <li>Creation of a background drawable of an arbitrary size</li>
  <li>Creation of text layer which exactly fits the text with the command gimp_text_fontname().</li>
  <li>Resizing the image and the background to the size of the text layer.</li>
</ul>
<p>
  The result is an image composed of two layers; a transparent text layer on top of a uniform background.
</p>

<pre class="code">
#!/usr/local/bin/perl
use Gimp ":auto";
use Gimp::Fu;
sub basic_logo {
    my($font, $border, $text, $bgcolor, $fgcolor) = @_;
    # Create a new image of an arbitrary size with
    $img = gimp_image_new(100, 100, RGB);
    # Create a new layer for the background of arbitrary size, and
    # add it to the image
    my $background = gimp_layer_new($img, 100, 100,
                              RGB, "Background", 100,
                              NORMAL_MODE);
    gimp_image_add_layer($background, 1);
    # Choose color of text
    gimp_palette_set_foreground($fgcolor);
    # Create the text layer. Using -1 as the drawable creates a new layer.
    my $text_layer = gimp_text_fontname($img, -1, 0, 0, $text,
                                  $border, 1,
                                  xlfd_size($font), $font);
    # Get size of the text drawable and resize the image and the
    # background layer to this size.
    my($width, $height) = ($text_layer-&gt;width, $text_layer-&gt;height);
    gimp_image_resize($img, $width, $height, 0, 0);
    gimp_layer_resize($background, $width, $height, 0, 0);
    # Fill the background layer now when it has the right size.
    gimp_palette_set_background($bgcolor);
    gimp_edit_fill($background, BG_IMAGE_FILL);
    return $img;
}
# register the script
register "basic_logo", "basic logo", "basic logo",
    "Dov Grobgeld", "Dov Grobgeld",
    "1999-06-09",
    "&lt;Toolbox&gt;/Xtns/Perl-Fu/Tutorial/Basic Logo",
    "",
    [
     [PF_FONT,   "font",     "font",   "-*-utopia-bold-r-*-*-70-*-*-*-*-*-*-*"],
     [PF_INT,    "border",   "border", "10"],
     [PF_STRING, "text",     "text", "Hello world!"],
     [PF_COLOR,  "bg_color", "Background color", [40,180,160]],
     [PF_COLOR,  "fg_color", "Background color", [255,255,0]],
    ],
    \&amp;basic_logo;
# Handle over control to GIMP
exit main();
</pre>

<p class="images">
  <img src="basic-logo-dialog.png" alt=""/>
  <img src="basic-logo.png" alt=""/>
</p>
<p>
  Note the special syntax of gimp_image_text_fontname()  in line 23 in basic-logo with an 
  image specified for a first parameter, and the drawable = -1. 
  This is in contradiction to the rule above that the image should not be specified for PDB 
  functions that take both an image and a drawable as the first two parameters. 
  But since the drawable=-1, which has no image related to it, an image explicitly be provided. 
  The special case drawable=-1 means that instead of creating a floating layer, 
  a new image layer will be created.
</p>
<p>
  The result shown in the dialog and the resulting image above.
</p>

<h2>8. Floating selections</h2>
<p>
  When a region has been selected through one of the selection routines, the area outlined 
  by the selection may be copied to the cut-buffer through the gimp_edit_copy command. 
  The cut-buffer may subsequently be pasted into a different layer through the gimp_edit_paste command. 
  When a layer is pasted it becomes a floating selection. This floating selection may be moved to its required position by the command gimp_layer_set_offsets, 
  and finally it is pasted by the gimp_floating_sel_anchor command. Another way of determining the position of a pasted layer is to create a selection in the 
  target image before the cut-buffer is pasted.
</p>
<p>
  This is illustrated in the following program, which works on one image and takes as a parameter an another image, 
  which it concatenates to the right of the first image. The lines 28-38 shows how the second image is copied and glued into the first image.
</p>
<pre class="code">
#!/usr/local/bin/perl
use Gimp qw( :auto );
use Gimp::Fu;
sub horiz_cat {
    my($img1, $drw1, $drw2) = @_;
    # Get image 2
    $img1 = $drw1-&gt;image();
    my $img2 = gimp_drawable_image($drw2);
    # Get sizes through OO syntax
    my($w1, $h1) = ($drw1-&gt;width, $drw1-&gt;height);
    my($w2, $h2) = ($drw2-&gt;width, $drw2-&gt;height);
    # The new height is the maximum height of the images
    my $hmax = $h1 &gt; $h2 ? $h1 : $h2;
    # Create an undo group
    gimp_undo_push_group_start($img1);
    # Resize the drawable layer to make room for the img
    gimp_image_resize($img1, $w1+$w2, $hmax, 0, ($hmax-$h1)/2);
    gimp_layer_resize($drw1, $w1+$w2, $hmax, 0, ($hmax-$h1)/2);
    # Copy $drawable2 and paste it into the new space of $drawable1
    # select all of img2
    gimp_selection_all($img2);
    # copy it to the clipboard
    gimp_edit_copy($drw2);
    # make a selection in img 1 in the position where it is to be pasted
    gimp_rect_select($img1, $w1, ($hmax-$h2)/2, $w2, $h2, 0,0,0);
    # paste and then anchor it
    my $floating_layer = gimp_edit_paste($drw1, 0);
    gimp_floating_sel_anchor($floating_layer);
    # Close the undo group
    gimp_undo_push_group_start($img1);
    # Update the display
    gimp_displays_flush();
    return undef;
}
# register the script
register "horiz_cat", "Horizontal concat", "Horizontal Concat",
    "Dov Grobgeld", "Dov Grobgeld",
    "1999-05-4",
    "&lt;Image&gt;/Perl-Fu/Tutorial/Horizontal Concat",
    "*",
    [
     [PF_DRAWABLE,   "drawable",     "Drawable to concatenate",   undef],
    ],
    \&amp;horiz_cat;
# Handle over control to GIMP
exit main();
</pre>

<h2>9. The Perl Server and stand-alone scripts</h2>
<p>
  So far the scripts have all been started from the menu structure within GIMP. 
  But there is another possibility and that is to run the scripts from the command line
  as a normal Perl program. When run this way the script tries to connect to the Perl-Server, and if it fails, it will launch GIMP on its own. 
  If you plan to run several scripts this way, it is obviously much faster to run the Perl-Server since launching GIMP takes quite a bit of time. 
  The Perl-server may be started from the Xtns menu.
</p>
<p>
  When a Perl-Fu script is run from the command line, the result is the same as when it is run through the menus, 
  except that it may be run with the --output (or -o) parameter in which case it will save the result to a file instead of displaying it within GIMP. 
  This is great for batch creation of logos, etc.
</p>
<p>
  The filename for the --output has some special magic that allows to set some special image saving parameters, like interlace, quality factor, etc. 
  See the Gimp::Fu man page for details. Note that the normal rules about image and file types are still valid, thus, for example, in order to save
  an image as a gif file, it must be converted from RGB to an indexed image. Currently this functionality must be included in each script, 
  but it is possible that a future version of Gimp::Fu, will include this conversion as an option.
</p>
<p>
  Here are two invocations of the scripts declared above, but with output written to a jpg file and a png file. As we said above, 
  we can't save them as gif as the scripts do not index the images.
</p>
<p>
  Perl-GIMP-from-shell:
</p>
<pre>uni -o /tmp/uni.ppm -size 100 -color "#5050ff"</pre>
<pre>basic-logo -font '-*-utopia-*-r-*-*-100-*-*-*-*-*-*-*' -o /tmp/bl.ppm -text "Perl rules"</pre>
<p>
  <b>Note:</b> that due to a bug in my version of GIMP/Perl I was not able to output images in any format but in ppm and gif. Your mileage may vary. 
  Another important use of this interface is that it enables running of the Perl debugger on the Perl-Fu scripts.
</p>
<p>
  <b>Note:</b>The image is saved to the directory where GIMP was started from 
  and not to the directory in which the scripts were invoked, unless a complete path is given!
</p>

<h2>10. End notes</h2>
<p>
  This tutorial has covered only a small part of the possibilities available to a script writer. 
  In particular the following issues available to Gimp::Perl scripts have not been covered:
</p>
<ul>
  <li>The possibility of writing customized Gtk interfaces.</li>
  <li>Writing fullfledged plug-ins that manipulate the tile data through the Perl Data Language (PDL) module.</li>
  <li>Using Perl::GIMP in a CGI environment.</li>
  <li>How to fill with gradients in a plugin</li>
  <li>How to do "free selections".</li>
</ul>

<p>
  The original tutorial can be found <a href="tutorial:Basic_Perl-Dov_Grobgeld">here</a>.
</p>
<!--#include virtual="/includes/wgo-page-fini.xhtml" -->
    <div>
      <span id="footerleft">
        Tutorial &copy; 2002 <a href="home:People-Grobgeld_Dov">Dov Grobgeld</a>
      </span>
      <span id="footerright">
        <a href="mail:People-Grobgeld_Dov">dov@imagic.weizmann.ac.il</a>
      </span>
    </div>
<!--#include virtual="/includes/wgo-xhtml-fini.xhtml" -->
