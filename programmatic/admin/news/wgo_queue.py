#!/usr/bin/env ${PYTHON}
# -*- mode: python py-indent-offset: 2; -*-
#
# www.gimp.org website administration and tools
#
# Copyright (C) 2002, 2003 Helvetix Victorinox, a pseudonym,
# Mountain View, California
# 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA

import errno
import fcntl
import getopt
import os
import re
import stat
import string
import sys
import time
import types

import wgo
import wgo_news
import news_config
import xhtml
import rdf

def safe_filename(path):
  path = str(path)
  return (path.replace("/", "").replace("&", ""))

def canonical_path(qname):
  if qname in [ news_config.pending_queue, news_config.current_queue, news_config.archive_queue]:
    return (wgo.config.spool_path + qname + "/")
  return (None)

def file_path(qname, file):
  return canonical_path(qname) + safe_filename(file)
  
def message_path(qname, messageid):
  return (file_path(qname, messageid))

def generate_rdf(queue):
  rdf_file = file_path(queue, "news.rdf")
  
  dirpath = canonical_path(queue)
  names = map(lambda t: dirpath + t, os.listdir(dirpath))
  #names.sort(lambda a, b: cmp(os.stat(a)[stat.ST_MTIME], os.stat(b)[stat.ST_MTIME]))
  names.sort(lambda a, b: cmp(os.stat(a).st_mtime, os.stat(b).st_mtime))
  news_items = map(lambda f: wgo_news.news(f, False), names)
  news_items = filter(lambda n: n.valid, news_items)
             
  news_blotter = file_path(queue, news_config.news_blotter)

  fp = open(rdf_file, "w")
  print >>fp, '<?xml version="1.0"?>'
  print >>fp, '<?xml-stylesheet href="/style/rdf-news.css" type="text/css"?>'
  print >>fp, '<!-- this data is automatically generated on %s by wgo_queue.generate_rdf and friends -->' % (time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()))
  
  print >>fp, rdf.RDF.init()
  
  #print >>fp, rdf.link("http://mmmaybe.gimp.org")
  #print >>fp, rdf.dc_date(time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()))
  print >>fp, rdf.channel(rdf.title('GIMP Dot Org') + rdf.description('gimp.org news') + rdf.link('http://mmmaybe.gimp.org'),
                          { "rdf:about" : "http://www.w3.org/2000/08/w3c-synd/home.rss" }
                          )
  
  map(lambda n: fp.write(str(n.as_rdf())), news_items)

  print >>fp, rdf.RDF.fini()
  fp.close()
  
  os.chmod(news_blotter, 0666)

  # this is not the best way to handle this XXX
  if queue == news_config.current_queue:
    os.system("/bin/cp %s %s" % (rdf_file, wgo.config.DocumentRoot_path + "/news.rdf"))
    pass
  
  return (rdf_file)

def generate_blotter(queue):
  dirpath = canonical_path(queue)

  if dirpath != None:
    names = map(lambda t: dirpath + t, os.listdir(dirpath))
    #names.sort(lambda a, b: cmp(os.stat(a)[stat.ST_MTIME], os.stat(b)[stat.ST_MTIME]))
    names.sort(lambda a, b: cmp(os.stat(b).st_mtime, os.stat(a).st_mtime))
    news_items = map(lambda f: wgo_news.news(f, False), names)
    news_items = filter(lambda n: n.valid, news_items)
             
    news_blotter = file_path(queue, news_config.news_blotter)
    
    fp_out = open(news_blotter, "w")
    print >>fp_out, '<!-- this data is automatically generated by wgo_queue.generate_blotter and friends -->'
    print >>fp_out, "<!-- begin chartae -->"
    map(lambda n: fp_out.write(n.as_news_item()), news_items)
    print >>fp_out, "<!-- end chartae -->"
    fp_out.close()
    os.chmod(news_blotter, 0666)

    # this is not the best way to handle this XXX
    if queue == news_config.current_queue:
      os.system("/bin/cp %s %s" % (news_blotter, wgo.config.DocumentRoot_path + "/includes/news.inc"))
      pass
    pass

  generate_rdf(queue)
  return (news_blotter)


if __name__ == '__main__':
  generate_rdf("news-pending")
